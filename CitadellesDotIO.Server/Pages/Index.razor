@page "/"
@using CitadellesDotIO.Server.Client.CustomEventArgs
@using CitadellesDotIO.Engine
@using CitadellesDotIO.Server.Client
@using CitadellesDotIO.Server.Models
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavManager;
@implements IAsyncDisposable;
@implements IDisposable;


<PageTitle>Index</PageTitle>

@if (this.LobbiesClient != null)
{
    <div id="lobbiesContainer container-flex" style="display: @(IsConnected ? "block" : "none");">
        @if(this.LobbiesClient.CanPlayerJoinLobby)
        {
            <EditForm Model="@LobbiesClient.Player" OnSubmit="@RegisterPlayer">
                <InputText id="lobbyName" placeholder="Lobby name" @bind-Value="@LobbiesClient.NewLobby.Name"></InputText>
                <button type="submit" @onclick="@LobbiesClient.CreateLobbyAsync">
                    <i class="fa-solid fa-square-plus"></i>
                    Create Lobby
                </button>
            </EditForm>
        }        

        @foreach (Lobby lobby in this.LobbiesClient.Lobbies)
        {
            <LobbyListItem lobby="@lobby"
                   OnJoinButtonClicked="@((args)=>this.LobbiesClient.JoinLobbyAsync(@lobby.Id))"
                   OnLeaveButtonClicked="@((args)=>this.LobbiesClient.LeaveLobbyAsync())"
                   IsPlayerInLobby="@this.LobbiesClient.IsPlayerInLobby(@lobby.Id)"
                   CanPlayerJoinLobby="@this.LobbiesClient.CanPlayerJoinLobby">
            </LobbyListItem>
        }

        @foreach (Player player in this.LobbiesClient.Players)
        {
            <p>@player.Name</p>
        }

        <div class="container border border-primary rounded">
            <p>@this.player.Name</p>
            <p>@this.LobbiesClient.ConnectionId</p>
            <p>@this.LobbiesClient.LobbyId</p>
        </div>
    </div>
}

<div id="connectionContainer" style="display: @(IsConnected ? "none" : "block");">
    <PlayerRegister Player="this.player" OnRegisterPlayerClicked="@((args)=>RegisterPlayer())"></PlayerRegister>
</div>






@code {
    LobbiesClient LobbiesClient;
    Player player = new(string.Empty);
    public bool IsConnected { get => this.LobbiesClient != null && this.LobbiesClient.IsConnected; }
    public HubConnectionState State { get; set; } = HubConnectionState.Disconnected;
    public string StateMessage { get; set; }



    private async void JoinLobby(string lobbyId)
    {
        await this.LobbiesClient.JoinLobbyAsync(lobbyId);
        // Gérer l'affichage du lobby rejoint et cacher les autres
    }

    async Task RegisterPlayer()
    {
        await this.Start();
        await this.LobbiesClient.GetLobbiesAsync();
        await this.LobbiesClient.GetPlayersAsync();
    }

    async Task Start()
    {
        if (this.LobbiesClient == null || !this.LobbiesClient.IsConnected)
        {
            this.LobbiesClient = new LobbiesClient(this.player, NavManager.BaseUri, DataChanged, StateChanged);
            await this.LobbiesClient.StartAsync();
            this.State = HubConnectionState.Connected;
            StateMessage = "Lobbies client connected";
        }
    }

    public async ValueTask DisposeAsync()
    {
        await this.Stop();
    }

    public void Dispose()=> this.Stop().RunSynchronously();

    async Task Stop()
    {
        if (this.LobbiesClient != null && this.LobbiesClient.IsConnected)
        {
            await this.LobbiesClient.StopAsync();
        }
    }

    async void StateChanged(object sender, StateChangedEventArgs e)
    {
        this.State = e.State;
        this.StateMessage = e.Message;
        await InvokeAsync(StateHasChanged);
    }

    async void DataChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

}