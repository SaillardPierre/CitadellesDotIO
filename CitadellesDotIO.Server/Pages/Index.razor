@page "/"
@using CitadellesDotIO.Server.Client.CustomEventArgs
@using CitadellesDotIO.Engine
@using CitadellesDotIO.Server.Client
@using CitadellesDotIO.Server.Models
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavManager;
@implements IAsyncDisposable;
@implements IDisposable;


<PageTitle>Index</PageTitle>
@if (this.IsConnected)
{
    <div id="playersContainer" class="container-flex col h-100">
        <h3>Connected Players</h3>
        <div class="scrollableDiv">
            @foreach (Player player in this.LobbiesClient.Players)
            {
                <p>@player.Name</p>
            }
        </div>
    </div>
    <div id="lobbiesContainer" class="container-flex col h-100">
        <div class="row">
            <h3 class="col-auto">Available Lobbies</h3>
            @if (this.LobbiesClient.CanPlayerJoinLobby)
            {
                <LobbyCreation NewLobby="this.LobbiesClient.NewLobby"
                       OnCreateButtonClicked="this.LobbiesClient.CreateLobbyAsync">
                </LobbyCreation>
            }
        </div>
        <div class="scrollableDiv">
            @foreach (Lobby lobby in this.LobbiesClient.Lobbies)
            {
                <LobbyListItem lobby="@lobby"
                       OnJoinButtonClicked="@((args)=>this.LobbiesClient.JoinLobbyAsync(@lobby.Id))"
                       OnLeaveButtonClicked="@((args)=>this.LobbiesClient.LeaveLobbyAsync())"
                       IsPlayerInLobby="@this.LobbiesClient.IsPlayerInLobby(@lobby.Id)"
                       CanPlayerJoinLobby="@this.LobbiesClient.CanPlayerJoinLobby">
                </LobbyListItem>
            }
        </div>

    </div>
    <div class="container-flex border border-primary rounded col h-auto">
        <h3>Your connectivity informations</h3>
        <p>@this.player.Name</p>
        <p>@this.LobbiesClient.ConnectionId</p>
        <p>@this.LobbiesClient.LobbyId</p>
    </div>
}
else
{
    <div id="connectionContainer" style ="width: 33%;margin: auto">
        <PlayerRegister Player="this.player" OnRegisterPlayerClicked="@((args)=>RegisterPlayer())"></PlayerRegister>
    </div>
}




@code {
    LobbiesClient LobbiesClient;
    Player player = new(string.Empty);
    public bool IsConnected { get => this.LobbiesClient != null && this.LobbiesClient.IsConnected; }
    public HubConnectionState State { get; set; } = HubConnectionState.Disconnected;
    public string StateMessage { get; set; }



    private async void JoinLobby(string lobbyId)
    {
        await this.LobbiesClient.JoinLobbyAsync(lobbyId);
        // Gérer l'affichage du lobby rejoint et cacher les autres
    }

    async Task RegisterPlayer()
    {
        await this.Start();
        await this.LobbiesClient.GetLobbiesAsync();
        await this.LobbiesClient.GetPlayersAsync();
    }

    async Task Start()
    {
        if (this.LobbiesClient == null || !this.LobbiesClient.IsConnected)
        {
            this.LobbiesClient = new LobbiesClient(this.player, NavManager.BaseUri, DataChanged, StateChanged);
            await this.LobbiesClient.StartAsync();
            this.State = HubConnectionState.Connected;
            StateMessage = "Lobbies client connected";
        }
    }

    public async ValueTask DisposeAsync()
    {
        await this.Stop();
    }

    public void Dispose() => this.Stop().RunSynchronously();

    async Task Stop()
    {
        if (this.LobbiesClient != null && this.LobbiesClient.IsConnected)
        {
            await this.LobbiesClient.StopAsync();
        }
    }

    async void StateChanged(object sender, StateChangedEventArgs e)
    {
        this.State = e.State;
        this.StateMessage = e.Message;
        await InvokeAsync(StateHasChanged);
    }

    async void DataChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

}