@using CitadellesDotIO.DeckAssembly.EventArgs.DraggableEventArgs
@using CitadellesDotIO.DeckAssembly.Model
@using System.Text
@inject IJSRuntime JS;
<RadzenCard @onmouseover=RaiseHoverStartEvent
            @onmouseleave=RaiseHoverEndEvent
            @ondrag=DragStart
            Style="@StyleAttribute"
            Class="@ClassAttribute" id="@CardId"
            data-identifier="@Card.Id"
            data-dragged="@Card.IsDragged.ToString().ToLower()"
            data-hovered="@Card.IsHovered.ToString().ToLower()"
            data-index="@Card.Index">
    <RadzenStack Gap="0">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">@Card.Id</RadzenText>
        @{
            switch (Card)
            {
                case CharacterCard characterCard:
                    <CharacterCardItem CharacterCard=characterCard></CharacterCardItem>
                    break;
                case null:
                    throw new ArgumentNullException(nameof(Card));
                default:
                    <RadzenText>UNKNOWN CARD TYPE</RadzenText>
                    break;
            }
        }
        <RadzenStack>
            <RadzenText>Index : @Card.Index</RadzenText>
            <RadzenText>InitialPosition</RadzenText>
            <RadzenRow Gap="10">
                <RadzenText>
                    X : @(Card.Position?.X.ToString())
                </RadzenText>
                <RadzenText>
                    Y : @(Card.Position?.Y.ToString())
                </RadzenText>
            </RadzenRow>
            <RadzenText>Transform</RadzenText>
            <RadzenRow Gap="10">
                <RadzenText>
                    X : @(Card.Transform?.X.ToString())
                </RadzenText>
                <RadzenText>
                    Y : @(Card.Transform?.Y.ToString())
                </RadzenText>
            </RadzenRow>
            <RadzenText>ZIndex :  @(Card.ZIndex)</RadzenText>
        </RadzenStack>

    </RadzenStack>
</RadzenCard>
@code {
    [Parameter]
    public Card Card { get; set; }
    [Parameter]
    public string SourceId { get; set; }

    private Position? InitialPosition { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        InitialPosition = await JS.InvokeAsync<Position>("getUpperTopCoordinatesById", CardId);
        Card.Position = InitialPosition;
    }

    [CascadingParameter]
    public Func<DraggableHoverStartEventArgs, Task> OnDraggableHoverStart { get; set; }

    private void DragStart()
    {

    }

    private async Task RaiseHoverStartEvent()
    {
        if (Card.IsDragged) return;
        DraggableHoverStartEventArgs args = new()
            {
                DraggableIndex = Card.Index,
                DraggableSource = SourceId
            };

        await OnDraggableHoverStart(args);
    }

    [CascadingParameter]
    public Func<DraggableHoverEndEventArgs, Task> OnDraggableHoverEnd { get; set; }

    private async Task RaiseHoverEndEvent()
    {
        if (Card.IsDragged) return;
        DraggableHoverEndEventArgs args = new();
        await OnDraggableHoverEnd(args);
    }

    private string StyleAttribute
    {
        get
        {
            StringBuilder stringBuilder = new();
            const double minWidth = 45;
            const double width = 125;
            const double ratio = 1.8;
            const double minHeight = minWidth * ratio;
            const double height = width * ratio;
            stringBuilder.Append("min-height:").Append(minHeight).Append("px;");
            stringBuilder.Append("min-width:").Append(minWidth).Append("px;");
            stringBuilder.Append("height:").Append(height).Append("px;");
            stringBuilder.Append("width:").Append(width).Append("px;");

            stringBuilder.Append("transform:translate(")
                .Append(Card.Transform.X).Append("px,")
                .Append(Card.Transform.Y).Append("px);");


            if (Card.ZIndex.HasValue)
            {
                stringBuilder.Append($"z-index:{Card.ZIndex};");
            }

            return stringBuilder.ToString();
        }
    }

    private string ClassAttribute
    {
        get
        {
            StringBuilder stringBuilder = new();
            foreach (string cssClass in CssClasses)
            {
                stringBuilder.Append(cssClass).Append(' ');
            }
            stringBuilder.Append("rz-p-1 ");
            if (Card.IsHovered)
            {
                stringBuilder.Append("rz-border-primary ");
            }
            else if (Card.IsDragged)
            {
                stringBuilder.Append("rz-border-secondary ");
            }
            else stringBuilder.Append("rz-border-white ");
            return stringBuilder.ToString();
        }
    }

    private string CardId => "DraggableCard" + Card.Id;

    [Parameter]
    public List<string> CssClasses { get; set; } = new() { };
}
