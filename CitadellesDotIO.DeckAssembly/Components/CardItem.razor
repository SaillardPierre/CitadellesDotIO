@using CitadellesDotIO.DeckAssembly.Model
@using System.Text
<RadzenCard Style="@StyleAttribute"
            Class="@ClassAttribute" id="@CardId"
            data-identifier="@Card.Id"
            data-index="@Index">
    <RadzenStack Gap="0">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">@Card.Id</RadzenText>
        @{
            switch (Card)
            {
                case CharacterCard characterCard:
                    <CharacterCardItem CharacterCard=characterCard></CharacterCardItem>
                    break;
                case null:
                    throw new ArgumentNullException(nameof(Card));
                default:
                    <RadzenText>UNKNOWN CARD TYPE</RadzenText>
                    break;
            }
        }        
        @* <p>X : @(Card.Transform.X)</p>
        <p>Y : @(Card.Transform.Y)</p>   *@
        <p>MarginLeft : @(Card.MarginLeft)</p>
        <p>MarginRight : @(Card.MarginRight)</p>
        <p>ZIndex : @(Card.ZIndex)</p>

@*         <p>@(nameof(Card.IsDirectNeighbour)) : @(Card.IsDirectNeighbour.ToString()) </p>
 *@    </RadzenStack>
</RadzenCard>
@code {
    [Parameter]
    public Card Card { get; set; }

    protected override void OnParametersSet()
    {
        Card.Index = Index;
    }

    [Parameter]
    public int Index { get; set; }

    private string StyleAttribute
    {
        get
        {
            StringBuilder stringBuilder = new();
            const double minWidth = 45;
            const double width = 125;
            const double ratio = 1.8;
            const double minHeight = minWidth * ratio;
            const double height = width * ratio;
            stringBuilder.Append("min-height:").Append(minHeight).Append("px;");
            stringBuilder.Append("min-width:").Append(minWidth).Append("px;");
            stringBuilder.Append("height:").Append(height).Append("px;");
            stringBuilder.Append("width:").Append(width).Append("px;");

            stringBuilder.Append("transform:translate(")
                .Append(Card.Transform.X).Append("px,")
                .Append(Card.Transform.Y).Append("px);");

            
            if(Card.ZIndex.HasValue)
            {
                stringBuilder.Append($"z-index:{Card.ZIndex};");
            }
            if (Card.IsDragged)
            {
                stringBuilder.Append($"z-index:{CardParameters.DraggedCardZIndex};");
            }

            stringBuilder.Append(Card.MarginLeft);
            stringBuilder.Append(Card.MarginRight);

            return stringBuilder.ToString();
        }
    }

    private string ClassAttribute
    {
        get
        {
            StringBuilder stringBuilder = new();
            foreach(string cssClass in CssClasses)
            {
                stringBuilder.Append(cssClass).Append(' ');
            }
            stringBuilder.Append("rz-p-1 ");
            if(Card.IsDragged || Card.IsDirectNeighbour)
            {
                stringBuilder.Append("rz-border-base-300 ");
            }
            return stringBuilder.ToString();
        }
    }

    private string CardId => "DraggableCard" + Card.Id;

    [Parameter]
    public List<string> CssClasses { get; set; } = new() {  };
}
