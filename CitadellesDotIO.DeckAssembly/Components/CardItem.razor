@using CitadellesDotIO.DeckAssembly.Model
<RadzenCard Style="@StyleAttribute"
            Class="@ClassAttribute" id="@CardId"
            data-identifier="@Card.Id"
            data-index="@Index">
    <RadzenStack Gap="0">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">@Card.Id</RadzenText>
        @{
            switch (Card)
            {
                case CharacterCard characterCard:
                    <CharacterCardItem CharacterCard=characterCard></CharacterCardItem>
                    break;
                case null:
                    throw new ArgumentNullException(nameof(Card));
                default:
                    <RadzenText>UNKNOWN CARD TYPE</RadzenText>
                    break;
            }
        }
        <p>Dragged : @Card.IsDragged</p>
        <p>X : @(Card.Position.X)</p>
        <p>Y : @(Card.Position.Y)</p>       
    </RadzenStack>
</RadzenCard>
@code {
    [Parameter]
    public Card Card { get; set; }

    [Parameter]
    public int Index { get; set; }

    private const string DefaultStyleAttribute = "min-height:80px;min-width:60px;height:250px;width:125px;";

    private string StyleAttribute
    {
        get
        {
            string result = $"{DefaultStyleAttribute}transform:translate({Card.Position.X}px, {Card.Position.Y}px);";
            if (Card.IsDragged)
            {
                result += "z-index:10;";
            }
            return result;
        }
    }

    private string ClassAttribute
    {
        get
        {
            return string.Join(" ", CssClasses);
        }
    }

    private string CardId => "DraggableCard" + Card.Id;

    [Parameter]
    public List<string> CssClasses { get; set; } = new() { "rz-p-1" };
}
