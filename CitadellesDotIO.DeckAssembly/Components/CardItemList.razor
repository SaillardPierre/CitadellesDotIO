@using CitadellesDotIO.DeckAssembly.EventArgs.Enums
@using CitadellesDotIO.DeckAssembly.Exceptions
@using CitadellesDotIO.DeckAssembly.Model
@using System.Text
<div class="@OuterClassAttributes" style="@OuterStyleAttribute" id="@Id">
    @Id
    <p>left : @LeftIndex</p>
    <p>right : @RightIndex</p>
    <div class="w-100"
         style="
        display: flex;
        flex-wrap: nowrap;
        justify-content: center;
        align-items: center;
        gap: @(Gap)px;
        border: 1px solid #000;
        overflow-x: visible;
        overflow-y: visible;">
        @{
            int index = 0;
            foreach (Card i in Cards)
            {
                <CardItem Card=i Index=index CssClasses=CardClasses />
                index++;
            }
        }
    </div>
</div>


@code {
    [Parameter]
    public List<Card> Cards { get; set; } = new();

    public int? LeftIndex;
    public int? RightIndex;

    [Parameter]
    public string Id { get; set; }

    private int Gap { get; set; } = -10;

    private string OuterStyleAttribute => "display: flex;flex-direction: column;justify-content: center;align-items: center;align-self: center;";
    private string OuterClassAttributes
    {
        get
        {
            StringBuilder stringBuilder = new();
            stringBuilder.Append("w-100 h-100 m-0 ");
            foreach (string cssClass in CssClasses)
            {
                stringBuilder.Append(cssClass).Append(' ');
            }
            if (IsHovered)
            {
                stringBuilder.Append("drop-available ");
                stringBuilder.Append("rz-border-base-300");
            }

            return stringBuilder.ToString();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1);
            SetOverlapFromIndex(Cards.Count-1);
        }
    }


    public bool IsHovered = false;

    public void Reset()
    {
        IsHovered = false;
        LeftIndex = default;
        RightIndex = default;
        foreach (Card card in Cards)
        {
            card.Reset();
        }
    }
    public void ResetExceptCard(Card exceptCard)
    {
        IsHovered = false;
        LeftIndex = default;
        RightIndex = default;
        foreach (Card card in Cards)
        {
            if (card != exceptCard)
            {
                card.Reset();
            }
        }
    }

    public void ResetExceptDraggedCard()
    {
        IsHovered = false;
        LeftIndex = default;
        RightIndex = default;
        foreach (Card card in Cards)
        {
            if (!card.IsDragged)
            {
                card.Reset();
            }
        }
    }

    public void SetOverlapFromIndex(int splitIndex, DragHoverTarget dragHoverTarget = DragHoverTarget.Self, int? draggedItemIndex = default)
    {
        (int? leftIndex, int? rightIndex) = DragManager.ComputeLeftRightIndexes(splitIndex, Cards.Count, dragHoverTarget, draggedItemIndex);

        if (leftIndex.HasValue)
        {
            int zIndex = CardParameters.DraggedCardZIndex - (leftIndex.Value + 1);
            // a gauche
            for (int i = 0; i != leftIndex + 1; i++)
            {
                Card target = Cards[i];
                if (!target.IsDragged)
                {
                    target.Reset();
                    target.ZIndex = zIndex;                    
                    //target.MarginLeft = $"margin-left:{CardParameters.MarginLeftPercentage}%";
                }
                zIndex++;
            }
            Cards[leftIndex.Value].IsDirectNeighbour = true;
        }
        if (rightIndex.HasValue)
        {
            int zIndex = CardParameters.DraggedCardZIndex;
            // a droite
            for (int i = rightIndex.Value; i < Cards.Count; i++)
            {
                zIndex--;
                Card target = Cards[i];
                if (!target.IsDragged)
                {
                    target.Reset();
                    target.ZIndex = zIndex;
                    //target.MarginRight = $"margin-right:-{CardParameters.MarginRightPercentage}%";
                }
            }
            Cards[rightIndex.Value].IsDirectNeighbour = true;
        }
        StateHasChanged();
    }

    [Parameter]
    public List<string> CssClasses { get; set; } = new() { };

    [Parameter]
    public List<string> CardClasses { get; set; } = new();
}
