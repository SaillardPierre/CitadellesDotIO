@using CitadellesDotIO.DeckAssembly.EventArgs.DraggableEventArgs
@using CitadellesDotIO.DeckAssembly.EventArgs.Enums
@using CitadellesDotIO.DeckAssembly.Exceptions
@using CitadellesDotIO.DeckAssembly.Model;
@inherits CustomComponent
﻿<div>
    <CascadingValue Value="this">
        <RadzenRow>
            <RadzenColumn>
                Has Dragged Card : @(DraggedCard is not null ? "True" : "False")
                <RadzenText />
            </RadzenColumn>
            <RadzenColumn>
                Has Drag Hover Source : @(DragHoverSource is not null ? "True (" + DragHoverSource.Id + ")" : "False")
                <RadzenText />
            </RadzenColumn>
        </RadzenRow>
        @{
            foreach (KeyValuePair<string, List<Card>> cardsDeal in InitialCardsDeals)
            {
                <CardListComponent Id="@cardsDeal.Key" InitialCards="@cardsDeal.Value"
                                   @ref=CardListComponentsRefs[cardsDeal.Key] @key=cardsDeal.Key />
            }
        }
    </CascadingValue>
</div>


@code {
    [Parameter] public Dictionary<string, List<Card>> InitialCardsDeals { get; set; }
    private Dictionary<string, CardListComponent> CardListComponentsRefs { get; set; } = new();

    private Card? DraggedCard { get; set; }
    private CardListComponent? DraggedCardSource { get; set; }

    private CardListComponent? DragHoverSource { get; set; }

    protected override void OnParametersSet()
    {
        StateException.ThrowIfNull(InitialCardsDeals);
        // Création des clés pour recevoir la référence lors du rendu du composant
        foreach (var key in InitialCardsDeals.Keys)
        {
            CardListComponentsRefs[key] = null;
        }
    }

    // TODO : Appliquer ceci comme pour les listes
    public override void SelfRefresh()
    {
        foreach (CardListComponent? cardListComponent in CardListComponentsRefs.Values)
        {
            cardListComponent?.PreventRender();
        }
        StateHasChanged();
        foreach (CardListComponent? cardListComponent in CardListComponentsRefs.Values)
        {
            cardListComponent?.AllowRender();
        }
    }

    public void OnDraggableDragStart(DraggableDragStartEventArgs args)
    {
        StateException.ThrowIfNotNull(DraggedCard);
        StateException.ThrowIfNotNull(DraggedCardSource);

        DraggedCardSource = CardListComponentsRefs[args.DraggableSource];
        StateException.ThrowIfNull(DraggedCardSource);

        DraggedCard = DraggedCardSource.Cards[args.DraggableIndex];
        StateException.ThrowIfNull(DraggedCard);

        //StateHasChanged();
    }

    public void OnDraggableDragEnd()
    {
        StateException.ThrowIfNull(DraggedCard);
        StateException.ThrowIfNull(DraggedCardSource);

        DraggedCard = null;
        DraggedCardSource = null;

        //StateHasChanged();
    }

    public void OnDraggableMove(DraggableMoveEventArgs args)
    {
        StateException.ThrowIfNull(DraggedCard);
        StateException.ThrowIfNull(DraggedCardSource);
    }

    public void OnDraggableDropzoneEnter(DraggableDropzoneEnterEventArgs args)
    {
        StateException.ThrowIfNull(DraggedCard, nameof(DraggedCard));
        // Ici le DragHoverSource peut déja avoir une valeur si on passe de l'une à l'autre, on remplace juste la ref
        // Donc pas de : StateException.ThrowIfNotNull(DragHoverSource, nameof(DragHoverSource));

        DragHoverSource = CardListComponentsRefs[args.DropzoneHoverSource];
        StateException.ThrowIfNull(DragHoverSource, nameof(DragHoverSource));

        if (args.DragHoverTarget == DragHoverTarget.Target)
        {
            DragHoverSource.ToggleDragHover(true);
        }
        //SelfStateHasChanged();
    }

    public void OnDraggableDropzoneLeave(DraggableDropzoneLeaveEventArgs args)
    {
        StateException.ThrowIfNull(DragHoverSource, nameof(DragHoverSource));
        DragHoverSource = null;
        //SelfStateHasChanged();
    }
}
