@using CitadellesDotIO.DeckAssembly.EventArgs.DraggableEventArgs
@using CitadellesDotIO.DeckAssembly.Exceptions
@using CitadellesDotIO.DeckAssembly.Model;
﻿<div class="futureDropzoneClassName">
    <CascadingValue Value="this">
        @{
            foreach (KeyValuePair<string, List<Card>> cardsDeal in InitialCardsDeals)
            {
                <CardListComponent Id="@cardsDeal.Key" Cards="@cardsDeal.Value" @ref=CardListComponentsRefs[cardsDeal.Key] />
            }
        }
    </CascadingValue>
</div>


@code {
    [Parameter] public Dictionary<string, List<Card>> InitialCardsDeals { get; set; }
    private Dictionary<string, CardListComponent> CardListComponentsRefs { get; set; } = new();

    private Card? draggedCard { get; set; }
    public bool HasDraggedCard => draggedCard is not null;

    private CardListComponent? draggedCardSource { get; set; }

    protected override void OnParametersSet()
    {
        StateException.ThrowIfNull(InitialCardsDeals);
        // Crée les clés pour recevoir la référence lors du rendu du composant
        foreach (var key in InitialCardsDeals.Keys)
        {
            CardListComponentsRefs[key] = null;
        }
    }

    public virtual void OnDraggableDragStart(DraggableDragStartEventArgs args)
    {
        StateException.ThrowIfNotNull(draggedCard);
        StateException.ThrowIfNotNull(draggedCardSource);

        draggedCardSource = CardListComponentsRefs[args.DraggableSource];
        StateException.ThrowIfNull(draggedCardSource);

        draggedCard = draggedCardSource.Cards[args.DraggableIndex];
        StateException.ThrowIfNull(draggedCard);
    }

    public virtual void OnDraggableDragEnd()
    {
        // TODO : A voir si au moment du drop le reset est pas fait
        StateException.ThrowIfNull(draggedCard);
        StateException.ThrowIfNull(draggedCardSource);

        draggedCard = null;
        draggedCardSource = null;
    }


    public virtual void OnDraggableMove(DraggableMoveEventArgs args)
    {
        StateException.ThrowIfNull(draggedCard);
        StateException.ThrowIfNull(draggedCardSource);
    }
}
