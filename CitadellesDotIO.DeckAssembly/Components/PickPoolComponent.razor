@using CitadellesDotIO.DeckAssembly.EventArgs.DraggableEventArgs
@using CitadellesDotIO.DeckAssembly.EventArgs.Enums
@using DeckAssembly.EventArgs
@using DeckAssembly.Model
@using Microsoft.JSInterop;
@using System.Text.RegularExpressions
@using System.Globalization
@inherits DraggableContainerComponent;

<RadzenStack style="width: 100%; height: 70vh;" JustifyContent="JustifyContent.Stretch" Gap="0px">
    <CardItemList @ref=PickPool Id=@nameof(PickPool) Cards=PickPoolValue CssClasses="new(){DropzonesClassName}" CardClasses="new(){DraggablesClassName}" />
    <RadzenRow style="width: 100%; height: 10vh;min-height:10vh" JustifyContent="JustifyContent.Stretch">

        <p>
            FutureDropIndex :
            <RadzenText Text=@FutureDropIndex.ToString() TextStyle="TextStyle.DisplayH1" />
        </p>
        <p>
            CurrentSource :
            <RadzenText Text=@CurrentSource?.Id.ToString() TextStyle="TextStyle.DisplayH1" />
        </p>
        <p>
            CurrentHoverTarget :
            <RadzenText Text=@CurrentHoverTarget?.Id.ToString() TextStyle="TextStyle.DisplayH1" />
        </p>
    </RadzenRow>
    <CardItemList @ref=PickHand Id=@nameof(PickHand) Cards=PickHandValue CssClasses="new(){DropzonesClassName}" CardClasses="new(){DraggablesClassName}" />
</RadzenStack>

@code {

    public PickPoolComponent() : base("pickPoolDraggable", "pickPoolDropzone")
    {
    }
    private string PickPoolSizeLabel => $"PickPoolSize : {PickPoolValue.Count + PickHandValue.Count}";
    [Parameter]
    public int PickHandLowerThreshold { get; set; }
    [Parameter]
    public int? PickHandUpperThreshold { get; set; }

    [Parameter]
    public List<Card> PickPoolValue { get; set; }
    private CardItemList PickPool { get; set; }

    public List<Card> PickHandValue { get; set; } = new() { new CharacterCard(9, new Engine.DTOs.CharacterDto(1, "Test", null)), new CharacterCard(10, new Engine.DTOs.CharacterDto(1, "Test", null)) };
    private CardItemList PickHand { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        BlazorComponent = DotNetObjectReference.Create(this as DraggableContainerComponent);
        InitJS();
    }

    [JSInvokable(nameof(OnDraggableDragStart))]
    public override async Task OnDraggableDragStart(DraggableDragStartEventArgs args)
    {
        this.CurrentSource = GetTargetPickSource(args.DraggableSource);
        await base.OnDraggableDragStart(args);
    }

    [JSInvokable(nameof(OnDraggableDropzoneEnter))]
    public override async Task OnDraggableDropzoneEnter(DraggableDropzoneEnterEventArgs args)
    {
        this.CurrentHoverTarget = GetTargetPickSource(args.DropzoneHoverSource);
        await base.OnDraggableDropzoneEnter(args);
    }

    #region A extraire dans un PickPoolManager
    // TODO : En réalité c'est ceci qu'il faudrait transformer en
    // Dico/Hashset pour determiner chaque cible selon l'id et construire le dico
    // dans le constructeur du composant avec le @ref
    private CardItemList GetTargetPickSource(string pickSourceId)
    {
        if (pickSourceId == nameof(PickPool)) return PickPool;
        if (pickSourceId == nameof(PickHand)) return PickHand;
        else throw new ArgumentException();
    }
    private CardItemList GetOppositePickSource(string pickSourceId)
    {
        if (pickSourceId == nameof(PickPool)) return PickHand;
        if (pickSourceId == nameof(PickHand)) return PickPool;
        else throw new ArgumentException();
    }
    #endregion
}
